import os
import logging
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, InputMediaPhoto
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
    ConversationHandler
)

# === –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ===
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TOKEN = os.getenv("BOT_TOKEN")
if not TOKEN:
    logger.error("–û—à–∏–±–∫–∞: –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    exit(1)

ADMIN_IDS = [5979123966, 939518066]
SPECIALIST_ADMIN_ID = 939518066

# –≠—Ç–∞–ø—ã –¥–∏–∞–ª–æ–≥–∞
NAME, PHONE, COMMENT, PHOTO = range(4)
MIN_PHOTOS = 4

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏."""
    keyboard = [
        [KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É")],
        [KeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É")]
    ]
    markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –≥–æ—Ç–æ–≤ –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ç–≤–æ–∏ –∑–∞—è–≤–∫–∏. –í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∏–∂–µ üëá",
        reply_markup=markup
    )
    # –ó–∞–≤–µ—Ä—à–∞–µ–º –ª—é–±–æ–π –∞–∫—Ç–∏–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π
    return ConversationHandler.END

async def start_new_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏."""
    context.user_data.clear()
    context.user_data["photos"] = []
    await update.message.reply_text(
        "–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?", 
        reply_markup=ReplyKeyboardRemove()
    )
    return NAME

async def handle_specialist_redirect(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É '–ù–∞–ø–∏—Å–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É'."""
    chat_info = await context.bot.get_chat(SPECIALIST_ADMIN_ID)
    if chat_info.username:
        await update.message.reply_text(
            f"–ß–∞—Ç —Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º: t.me/{chat_info.username}"
        )
    else:
        await update.message.reply_text(
            "–£ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –Ω–µ—Ç –ø—É–±–ª–∏—á–Ω–æ–≥–æ username. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É, —á—Ç–æ–±—ã –æ–Ω —Å–≤—è–∑–∞–ª—Å—è —Å –≤–∞–º–∏."
        )
    return ConversationHandler.END

async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–º—è –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω."""
    context.user_data["name"] = update.message.text
    await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    return PHONE

async def get_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π."""
    context.user_data["phone"] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):")
    return COMMENT

async def get_comment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ñ–æ—Ç–æ."""
    comment = update.message.text
    context.user_data["comment"] = comment if comment.lower() != '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å' else '–ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è'
    await update.message.reply_text(
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–µ –º–µ–Ω–µ–µ {MIN_PHOTOS} —Ñ–æ—Ç–æ. –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏—Ö –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø–æ–π –∏–ª–∏ –ø–æ –æ–¥–Ω–æ–º—É. "
        "–ü–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ –≤—Å–µ —Ñ–æ—Ç–æ, –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'."
    )
    return PHOTO

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–æ—Ç–æ –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–Ω–æ–ø–∫—É '–ì–æ—Ç–æ–≤–æ' –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ MIN_PHOTOS."""
    if update.message.photo:
        photo_file_id = update.message.photo[-1].file_id
        context.user_data.setdefault("photos", []).append(photo_file_id)

    current_photos_count = len(context.user_data.get("photos", []))
    
    if current_photos_count >= MIN_PHOTOS:
        keyboard = [[KeyboardButton("–ì–æ—Ç–æ–≤–æ")]]
        markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(
            f"–ü–æ–ª—É—á–µ–Ω–æ {current_photos_count} —Ñ–æ—Ç–æ. –ù–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.",
            reply_markup=markup
        )
    else:
        await update.message.reply_text(
            f"–ü–æ–ª—É—á–µ–Ω–æ {current_photos_count}/{MIN_PHOTOS} —Ñ–æ—Ç–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â—ë —Ñ–æ—Ç–æ."
        )
    
    return PHOTO

async def finalize_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞—è–≤–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –¥–∏–∞–ª–æ–≥."""
    photos = context.user_data.get("photos", [])
    
    if len(photos) < MIN_PHOTOS:
        await update.message.reply_text(
            f"–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ –º–µ–Ω–µ–µ {MIN_PHOTOS} —Ñ–æ—Ç–æ. "
            f"–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Ç–æ–ª—å–∫–æ {len(photos)}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â—ë —Ñ–æ—Ç–æ."
        )
        return PHOTO

    user_username = update.effective_user.username or '–ù–µ —É–∫–∞–∑–∞–Ω'
    user_id = update.effective_user.id
    
    text = (
        f"üì© –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:\n"
        f"üë§ –ò–º—è: {context.user_data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {context.user_data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {context.user_data.get('comment', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"üîó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <a href='tg://user?id={user_id}'>{user_username}</a>"
    )

    for admin_id in ADMIN_IDS:
        await context.bot.send_message(
            chat_id=admin_id,
            text=text,
            parse_mode='HTML'
        )
        if photos:
            try:
                media_group = [InputMediaPhoto(media=photo_id) for photo_id in photos]
                await context.bot.send_media_group(chat_id=admin_id, media=media_group)
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É: {e}")
                for photo_id in photos:
                    await context.bot.send_photo(chat_id=admin_id, photo=photo_id)

    await update.message.reply_text(
        "–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.",
        reply_markup=ReplyKeyboardRemove()
    )
    context.user_data.clear()
    
    await start(update, context)
    return ConversationHandler.END

# === –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø ===
def main():
    app = ApplicationBuilder().token(TOKEN).build()

    # –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –¥–æ–ª–∂–Ω—ã –ø—Ä–µ—Ä—ã–≤–∞—Ç—å—Å—è ConversationHandler
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.Regex("^–ù–∞–ø–∏—Å–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É$"), handle_specialist_redirect))
    
    # –ó–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ–º —Å–∞–º ConversationHandler
    conv_handler = ConversationHandler(
        entry_points=[
            MessageHandler(filters.Regex("^–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É$"), start_new_request),
        ],
        states={
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
            PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_phone)],
            COMMENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_comment)],
            PHOTO: [
                MessageHandler(filters.PHOTO, handle_photo),
                MessageHandler(filters.Regex("(?i)^–ì–æ—Ç–æ–≤–æ$"), finalize_request)
            ],
        },
        fallbacks=[
            CommandHandler("cancel", start), # –ü—Ä–∏ /cancel –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            MessageHandler(filters.Regex("^–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É$"), start_new_request),
        ],
    )
    app.add_handler(conv_handler)
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω (polling)")
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ Webhook –¥–ª—è Render
    PORT = int(os.environ.get("PORT", "8080"))
    app.run_webhook(listen="0.0.0.0",
                    port=PORT,
                    url_path=TOKEN,
                    webhook_url=os.environ.get("WEBHOOK_URL", ""))

if __name__ == "__main__":
    main()
